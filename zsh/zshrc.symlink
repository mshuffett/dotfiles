# Personal Zsh configuration file. It is strongly recommended to keep all
# shell customization and configuration (including exported environment
# variables such as PATH) in this file or in files sourced from it.
#
# Documentation: https://github.com/romkatv/zsh4humans/blob/v5/README.md.

# Periodic auto-update on Zsh startup: 'ask' or 'no'.
# You can manually run `z4h update` to update everything.
zstyle ':z4h:' auto-update      'no'
# Ask whether to auto-update this often; has no effect if auto-update is 'no'.
zstyle ':z4h:' auto-update-days '28'

# Keyboard type: 'mac' or 'pc'.
zstyle ':z4h:bindkey' keyboard  'mac'

# Start tmux if not already in tmux.
# Only start tmux if not already in tmux and not in cursor
if [[ -z "$TMUX" && -z "$CURSOR_TRACE_ID" ]]; then
  zstyle ':z4h:' start-tmux command tmux -u new -A -D -t z4h
else
  zstyle ':z4h:' start-tmux       no
fi

# Whether to move prompt to the bottom when zsh starts and on Ctrl+L.
zstyle ':z4h:' prompt-at-bottom 'no'

# Mark up shell's output with semantic information.
zstyle ':z4h:' term-shell-integration 'yes'

# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char 'accept'

# Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete' recurse-dirs 'no'

# Enable direnv to automatically source .envrc files.
zstyle ':z4h:direnv'         enable 'yes'
# Show "loading" and "unloading" notifications from direnv.
zstyle ':z4h:direnv:success' notify 'yes'

# Enable ('yes') or disable ('no') automatic teleportation of z4h over
# SSH when connecting to these hosts.
zstyle ':z4h:ssh:example-hostname1'   enable 'yes'
zstyle ':z4h:ssh:*.example-hostname2' enable 'no'
# The default value if none of the overrides above match the hostname.
zstyle ':z4h:ssh:*'                   enable 'no'

# Send these files over to the remote host when connecting over SSH to the
# enabled hosts.
zstyle ':z4h:ssh:*' send-extra-files '~/.nanorc' '~/.env.zsh'

# Clone additional Git repositories from GitHub.
#
# This doesn't do anything apart from cloning the repository and keeping it
# up-to-date. Cloned files can be used after `z4h init`. This is just an
# example. If you don't plan to use Oh My Zsh, delete this line.
z4h install ohmyzsh/ohmyzsh || return

# Install or update core components (fzf, zsh-autosuggestions, etc.) and
# initialize Zsh. After this point console I/O is unavailable until Zsh
# is fully initialized. Everything that requires user interaction or can
# perform network I/O must be done above. Everything else is best done below.
z4h init || return

# Path and environment variables extracted from ~/.dotfiles/zsh/zshrc.symlink
# Secrets Management
export ZSH_SECRETS_CACHE="$HOME/.zsh_secrets_cache"
if [ -f "$ZSH_SECRETS_CACHE" ]; then
  source "$ZSH_SECRETS_CACHE"
fi

# Utility directories
export ZSH=$HOME/.dotfiles
export ZSH_VAR_LIB_DIR=$HOME/.var/lib/zsh
[[ ! -d $ZSH_VAR_LIB_DIR ]] && mkdir -p $ZSH_VAR_LIB_DIR

# Terminal settings
export LESS='-iR'
export GPG_TTY=$TTY

# Programming languages and tools
export NVM_DIR="$HOME/.nvm"
export PNPM_HOME="/Users/michael/Library/pnpm"
export DENO_INSTALL="/Users/michael/.deno"

# Path configuration
typeset -U path # force path array to have unique values
path=(
  ~/.rye/shims
  /opt/homebrew/bin
  $HOME/.serverless/bin
  /Users/michael/miniconda3/bin
  ~/opt/anaconda3/bin
  $HOME/.jenv/bin
  /usr/local/go/bin
  $HOME/go/bin
  $PNPM_HOME
  $DENO_INSTALL/bin
  $HOME/bin
  /usr/bin
  /usr/local/opt/coreutils/libexec/gnubin
  /usr/local/bin
  /usr/local/sbin
  $HOME/.sfs
  $ZSH/bin
  /Applications/MiniZincIDE.app/Contents/Resources
  /Users/michael/Library/Python/3.7/bin
  $path
)

# Man path configuration
typeset -U manpath
manpath=(
  /usr/local/opt/coreutils/libexec/gnuman
  /usr/local/man
  /usr/local/mysql/man
  /usr/local/git/man
  $manpath
)

# Source additional local files if they exist.
z4h source ~/.env.zsh

# Use additional Git repositories pulled in with `z4h install`.
#
# This is just an example that you should delete. It does nothing useful.
z4h source ohmyzsh/ohmyzsh/lib/diagnostics.zsh  # source an individual file
z4h load   ohmyzsh/ohmyzsh/plugins/emoji-clock  # load a plugin

# Define key bindings.
z4h bindkey undo Ctrl+/   Shift+Tab  # undo the last command line change
z4h bindkey redo Option+/            # redo the last undone command line change

z4h bindkey z4h-cd-back    Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up      Shift+Up     # cd into the parent directory
z4h bindkey z4h-cd-down    Shift+Down   # cd into a child directory

# Autoload functions.
autoload -Uz zmv

# Define functions and completions.
function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md

# Additional useful functions from zshrc.symlink
# Function to refresh secrets from 1Password
refresh_secrets() {
  if command -v op &> /dev/null; then
    # Ensure we're logged into 1Password CLI
    if ! op account get > /dev/null 2>&1; then
      echo "Please sign in to 1Password CLI..."
      eval $(op signin)
    fi
    
    # Create secrets cache
    cat > "$ZSH_SECRETS_CACHE" <<EOL
export GITHUB_TOKEN="$(op read 'op://Private/GitHub/token')"
export OPENAI_API_KEY="$(op read 'op://Private/OpenAI API Key/api_key')"
export ANTHROPIC_API_KEY="$(op read 'op://Private/Anthropic API Key/api_key')"
export MAPBOX_ACCESS_TOKEN="$(op read 'op://Private/Mapbox Access Token/access_token')"
EOL
    
    chmod 600 "$ZSH_SECRETS_CACHE"
    source "$ZSH_SECRETS_CACHE"
    echo "Secrets refreshed from 1Password!"
  else
    echo "1Password CLI (op) not found. Please install it first."
  fi
}

# Go up multiple directories with u [number]
u() {
  set -A ud
  ud[1+${1-1}]=
  cd ${(j:../:)ud}
}

# Utility for logging into EKS more easily
eks-tok() { 
  if command -v aws &> /dev/null && command -v jq &> /dev/null; then
    aws eks get-token --cluster "$1" | jq -r ".status.token" | pbcopy 
  else
    echo "Required tools (aws cli or jq) not found."
  fi
}

# Define named directories: ~w <=> Windows home directory on WSL.
[[ -z $z4h_win_home ]] || hash -d w=$z4h_win_home

# Define aliases.
alias tree='tree -a -I .git'

# Add flags to existing aliases.
alias ls="${aliases[ls]:-ls} -A"

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt glob_dots     # no special treatment for file names with a leading dot
setopt no_auto_menu  # require an extra TAB press to open the completion menu
